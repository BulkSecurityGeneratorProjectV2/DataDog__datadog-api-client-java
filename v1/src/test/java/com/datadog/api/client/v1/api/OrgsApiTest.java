/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.client.v1.api;

import com.datadog.api.client.v1.ApiException;
import com.datadog.api.client.v1.model.Error400;
import com.datadog.api.client.v1.model.Error403;
import com.datadog.api.client.v1.model.Error415;
import com.datadog.api.client.v1.model.IdpResponse;
import com.datadog.api.client.v1.model.InlineObject;
import com.datadog.api.client.v1.model.Org;
import com.datadog.api.client.v1.model.OrgPostBody;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrgsApi
 */
@Ignore
public class OrgsApiTest {

    private final OrgsApi api = new OrgsApi();

    
    /**
     * Create child-organization.
     *
     * ## Overview This endpoint requires the [multi-org account](https://docs.datadoghq.com/account_management/multi_organization/) feature and must be enabled by [contacting support](https://docs.datadoghq.com/help/). ### ARGUMENTS * **&#x60;name&#x60;** [*required*]: The name of the new child-organization, limited to 32 characters. * **&#x60;subscription&#x60;** [*required*]: A JSON array of subscription type. Types available are **trial**, **free**, and **pro**. * **&#x60;billing&#x60;** [*required*]: A JSON array of billing type. Note that only **parent_billing** is supported.  Once a new child-organization is created, you can interact with it by using the **org.public_id**, **api_key.key**, and **application_key.hash** provided in the response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createChildOrgTest() throws ApiException {
        String apiKey = null;
        String applicationKey = null;
        OrgPostBody orgPostBody = null;
        Org response = api.createChildOrg(apiKey, applicationKey, orgPostBody);

        // TODO: test validations
    }
    
    /**
     * Get the organization
     *
     * ## Overview Gets information about your organization
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOrgTest() throws ApiException {
        String apiKey = null;
        String applicationKey = null;
        Org response = api.getOrg(apiKey, applicationKey);

        // TODO: test validations
    }
    
    /**
     * Update the organization
     *
     * ## Overview Updates the organization ### ARGUMENTS * **&#x60;name&#x60;** [*optional*]: The organization name. * **&#x60;settings&#x60;** [*optional*]: A JSON array of settings. Settings include:   * **&#x60;saml&#x60;**: Set the boolean property **enabled** to enable or disable single sign on with SAML. See the [SAML documentation](https://docs.datadoghq.com/account_management/saml) for more information about all SAML settings.   * **&#x60;saml_idp_initiated_login&#x60;**: has one property **enabled** (boolean).   * **&#x60;saml_strict_mode&#x60;**: has one property **enabled** (boolean).   * **&#x60;saml_autocreate_users_domains&#x60;**: has two properties: **enabled** (boolean) and **domains** which is a list of domains without the @ symbol.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOrgTest() throws ApiException {
        String apiKey = null;
        String applicationKey = null;
        String publicId = null;
        InlineObject inlineObject = null;
        Org response = api.updateOrg(apiKey, applicationKey, publicId, inlineObject);

        // TODO: test validations
    }
    
    /**
     * Upload IdP metadata
     *
     * ## Overview There are a couple of options for updating the Identity Provider (IdP) metadata from your SAML IdP. * **Multipart Form-Data**: Post the IdP metadata file using a form post. * **XML Body**: Post the IdP metadata file as the body of the request. ### Multipart Form-Data #### Headers * **&#x60;Content-Type: multipart/form-data&#x60;** #### Arguments * **&#x60;name&#x60;** [*required*]: The path to the XML metadata file you wish to upload. ### XML Body #### Headers * **&#x60;Content-Type: application/xml&#x60;** #### Arguments * The body must contain the contents of your IdP metadata XML file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadIdPForOrgTest() throws ApiException {
        String apiKey = null;
        String applicationKey = null;
        String publicId = null;
        String body = null;
        IdpResponse response = api.uploadIdPForOrg(apiKey, applicationKey, publicId, body);

        // TODO: test validations
    }
    
}
