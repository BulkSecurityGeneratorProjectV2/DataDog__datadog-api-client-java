/*
 * (C) Datadog, Inc. 2019
 * All rights reserved
 * Licensed under a 3-clause BSD style license (see LICENSE)
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.datadog.api.client.v1.api;

import com.datadog.api.client.v1.ApiException;
import com.datadog.api.client.v1.model.Error400;
import com.datadog.api.client.v1.model.Error403;
import com.datadog.api.client.v1.model.User;
import com.datadog.api.client.v1.model.UserCreatePayload;
import com.datadog.api.client.v1.model.UserCreateResponse;
import com.datadog.api.client.v1.model.UserDisableResponse;
import com.datadog.api.client.v1.model.UserGetAllResponse;
import com.datadog.api.client.v1.model.UserGetResponse;
import com.datadog.api.client.v1.model.UserUpdatePayload;
import com.datadog.api.client.v1.model.UserUpdateResponse;
import org.junit.After;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest extends V1ApiTest {

    private static UsersApi api;
    private final String testingUserHandle = "testinguser@datadoghq.com";
    private final String testingUserName = "Testing User";
    private final UserCreatePayload.AccessRoleEnum testingUserAR = UserCreatePayload.AccessRoleEnum.ST;
    private ArrayList<String> disableUsers = null;

    @Before
    public void resetDisableUsers() {
        disableUsers = new ArrayList<String>();
    }

    @BeforeClass
    public static void initApi() {
        api = new UsersApi(generalApiClient);
    }

    @After
    public void disableUsers() throws ApiException {
        if (disableUsers != null) {
            for (String handle: disableUsers) {
                UserGetResponse ugr = api.getUser(handle);
                if (!ugr.getUser().getDisabled()) {
                    api.disableUser(handle);
                }
            }
        }
    }

    /**
     * Create, modify and disable user object, also test getting it
     */
    @Test
    public void userCreateModifyDisableTest() throws ApiException {
        // Test creating user
        UserCreatePayload userCreatePayload = new UserCreatePayload();
        userCreatePayload.setAccessRole(testingUserAR);
        userCreatePayload.setHandle(testingUserHandle);
        userCreatePayload.setName(testingUserName);
        UserCreateResponse response = api.createUser(userCreatePayload);
        // If something fails, make sure we disable the user
        disableUsers.add(testingUserHandle);

        User user = response.getUser();
        assertEquals(testingUserHandle, user.getHandle());
        assertEquals(testingUserName, user.getName());
        assertEquals(testingUserAR.toString(), user.getAccessRole().toString());

        // Now test updating user
        UserUpdatePayload userUpdatePayload = new UserUpdatePayload();
        userUpdatePayload.setName("Updated Name");
        userUpdatePayload.setDisabled(false);
        UserUpdateResponse response2 = api.updateUser(user.getHandle(), userUpdatePayload);

        user = response2.getUser();
        assertEquals("Updated Name", user.getName());

        // Now test getting user
        UserGetResponse response3 = api.getUser(user.getHandle());
        user = response3.getUser();
        assertEquals(testingUserHandle, user.getHandle());
        assertEquals("Updated Name", user.getName());
        assertEquals(testingUserAR.toString(), user.getAccessRole().toString());
        assertEquals(false, user.getDisabled());

        // Now test disabling user
        api.disableUser(user.getHandle());
        UserGetResponse response4 = api.getUser(user.getHandle());
        user = response4.getUser();
        assertEquals(true, user.getDisabled());
    }

    /**
     * Get all users
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        ArrayList<String> prefixes = new ArrayList<String>(Arrays.asList("1", "2", "3"));
        for (String prefix: prefixes) {
            UserCreatePayload userCreatePayload = new UserCreatePayload();
            userCreatePayload.setAccessRole(testingUserAR);
            userCreatePayload.setHandle(prefix + testingUserHandle);
            userCreatePayload.setName(prefix + testingUserName);
            UserCreateResponse response = api.createUser(userCreatePayload);
            disableUsers.add(response.getUser().getHandle());
        }
        UserGetAllResponse response = api.getAllUsers();
        List<User> users = response.getUsers();
        for (String prefix: prefixes) {
            boolean found = false;
            for (User user: users) {
                if (user.getHandle().equals(prefix + testingUserHandle)) {
                    found = true;
                }
            }
            assertTrue(String.format("User %s%s not found", prefix, testingUserHandle), found);
        }
    }
}
